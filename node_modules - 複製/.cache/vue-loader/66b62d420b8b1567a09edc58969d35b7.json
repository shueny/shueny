{"remainingRequest":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\src\\views\\Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\src\\views\\Todo.vue","mtime":1556534594551},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TodoList from '@/components/TodoList'\n\nconst moment = require('moment')\n\nconst STORAGE_KEY = 'todos-vuejs'// 名稱\nvar todoStorage = {\n  fetch () {\n    const todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]')\n    todos.forEach((todo, index) => {\n      todo.id = index\n    })\n    todoStorage.uid = todos.length\n    return todos\n  },\n  save (todos) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))\n  }\n}\n\nexport default {\n  name: 'Todo',\n  components: { TodoList },\n  data () {\n    return {\n      newTodo: '',\n      todos: [\n        {\n          id: '11',\n          title: '要買蘿蔔',\n          completed: false,\n          comments: ['6:00pm', 'the new restaurant']\n        }\n      ],\n      cacheTodo: {},\n      cacheTodoTitle: '',\n      visibility: 'all',\n      day: moment().format('DD'),\n      year: moment().format('YYYY'),\n      month: moment().format('MMM'),\n      currentWeek: moment().format('ddd'),\n      timeMessage: moment().format('LTS')\n    }\n  },\n  methods: {\n    getTodos () {\n      if (localStorage.getItem('todos-vuejs')) {\n        this.todos = JSON.parse(localStorage.getItem('todos-vuejs'))\n      }\n    },\n    addTodo (e) {\n      // validation check\n      if (this.newTodo) {\n        this.todos.unshift({\n          id: this.todos.length,\n          title: this.newTodo,\n          completed: false\n        })\n      }\n      // reset newTodo\n      this.newTodo = ''\n      // save the new item in localstorage\n      return true\n    },\n    updateCurrentTime () {\n      this.timeMessage = moment().format('LTS')\n    },\n    cancelEdit() {\n      this.cacheTodo = {}\n    },\n    removeTodo (todo) {\n      const vm = this\n      // findIndex 是個比較簡單找到 index 的方式，會把回傳為 true 的 index 位置，存到前方(newIndex)的變數之中\n      const newIndex = vm.todos.findIndex((item, key) => todo.id === item.id)\n      this.todos.splice(newIndex, 1)\n    },\n    editTodo (item) {\n      console.log(item.title)\n      this.cacheTodo = item\n      this.cacheTodoTitle = item.title\n    },\n    cancelEdit () {\n      this.cacheTodo = {}\n    },\n    doneEdit (item) {\n      item.title = this.cacheTodoTitle\n      this.cacheTodoTitle = ''\n      this.cacheTodo = {}\n    },\n    deleteTodos () {\n      this.todos = []\n    }\n  },\n  computed: {\n    filteredTodos () {\n      if (this.visibility === 'all') {\n        return this.todos\n      } if (this.visibility === 'doing') {\n        var newTodo = []\n        this.todos.forEach((item) => {\n          if (!item.completed) {\n            newTodo.push(item)\n          }\n        })\n        return newTodo\n      } if (this.visibility === 'completed') {\n        newTodo = []\n        this.todos.forEach((item) => {\n          if (item.completed) {\n            newTodo.push(item)\n          }\n        })\n        return newTodo\n      }\n    },\n    remaining () {\n      return this.todos.filter(item => !item.completed)\n    }\n  },\n  mounted () {\n    this.getTodos()\n  },\n  watch: {\n    todos: {\n      handler (updatedList) {\n        localStorage.setItem('todos-vuejs', JSON.stringify(updatedList))\n      },\n      deep: true\n    }\n  },\n  created () {\n    this.timeMessage = moment().format('LTS')\n    setInterval(() => this.updateCurrentTime(), 1 * 1000)\n  }\n}\n",{"version":3,"sources":["Todo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Todo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"app-todo\">\n    <div class=\"container\">\n      <section class=\"header\">\n        <div class=\"text\">\n          <span class=\"day\" v-text=\"day\"> </span>\n          <span class=\"yearMonth\"><b class=\"year\" v-text=\"year\"></b><b class=\"month\" v-text=\"month\"> </b></span>\n          <span v-text=\"timeMessage\"></span><span class=\"week\" v-text=\"currentWeek\"> </span>\n        </div>\n      </section>\n      <section class=\"addTask\">\n        <input placeholder=\"+ Add task\" v-model=\"newTodo\" @keyup.enter=\"addTodo\"/>\n          <a class=\"btn btn--add\" @click=\"addTodo\">+</a>\n      </section>\n      <section class=\"content\">\n        <div>\n          <ul class=\"todoList\">\n            <TodoList \n             v-for='item in filteredTodos' \n             :index='item.index' \n             :item='item' \n             @cancel-item='cancelEdit'\n             @remove-todo='removeTodo'\n             @edit-todo='editTodo'\n             @done-edit='done-edit'\n             @delete-todo='deleteTodos'\n            ></TodoList>\n            <!-- <li class=\"list-group-item text-left\" v-for='item in filteredTodos' :key='item' @dblclick=\"editTodo(item)\">\n              <div class=\"d-flex\" v-if=\"item.id !== cacheTodo.id\">\n                <div class=\"form-check\">\n                  <label class=\"form-check-label\" :class=\"{'completed': item.completed }\" :for=\"item.id\">{{ item.title }}\n                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"item.completed\" :id=\"item.id\"/><span class=\"checkmark\"></span>\n                  </label>\n                </div>\n                <button class=\"close ml-auto\" type=\"button\" aria-label=\"Close\" @click=\"removeTodo(item)\"><span aria-hidden=\"true\">&times;</span></button>\n              </div>\n              <input class=\"form-control\" type=\"text\" v-model=\"cacheTodoTitle\" @keyup.esc=\"cancelEdit()\" @keyup.enter=\"doneEdit(item)\" v-if=\"item.id === cacheTodo.id\"/>\n            </li> -->\n          </ul>\n        </div>\n      </section>\n      <div class=\"filters\">\n        <button class=\"btn filters__btn filters__btn--all\" :class=\"{'active': visibility == 'all'}\" @click=\"visibility = 'all'\">All</button>\n        <button class=\"btn filters__btn filters__btn--complete\" :class=\"{'active': visibility == 'completed'}\" @click=\"visibility = 'completed'\">Complete</button>\n        <button class=\"btn filters__btn filters__btn--incomplete\" :class=\"{'active': visibility == 'doing'}\" @click=\"visibility = 'doing'\">Incomplete</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scope>\n@import '@/assets/scss/_todo.scss';\n</style>\n\n<script>\nimport TodoList from '@/components/TodoList'\n\nconst moment = require('moment')\n\nconst STORAGE_KEY = 'todos-vuejs'// 名稱\nvar todoStorage = {\n  fetch () {\n    const todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]')\n    todos.forEach((todo, index) => {\n      todo.id = index\n    })\n    todoStorage.uid = todos.length\n    return todos\n  },\n  save (todos) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))\n  }\n}\n\nexport default {\n  name: 'Todo',\n  components: { TodoList },\n  data () {\n    return {\n      newTodo: '',\n      todos: [\n        {\n          id: '11',\n          title: '要買蘿蔔',\n          completed: false,\n          comments: ['6:00pm', 'the new restaurant']\n        }\n      ],\n      cacheTodo: {},\n      cacheTodoTitle: '',\n      visibility: 'all',\n      day: moment().format('DD'),\n      year: moment().format('YYYY'),\n      month: moment().format('MMM'),\n      currentWeek: moment().format('ddd'),\n      timeMessage: moment().format('LTS')\n    }\n  },\n  methods: {\n    getTodos () {\n      if (localStorage.getItem('todos-vuejs')) {\n        this.todos = JSON.parse(localStorage.getItem('todos-vuejs'))\n      }\n    },\n    addTodo (e) {\n      // validation check\n      if (this.newTodo) {\n        this.todos.unshift({\n          id: this.todos.length,\n          title: this.newTodo,\n          completed: false\n        })\n      }\n      // reset newTodo\n      this.newTodo = ''\n      // save the new item in localstorage\n      return true\n    },\n    updateCurrentTime () {\n      this.timeMessage = moment().format('LTS')\n    },\n    cancelEdit() {\n      this.cacheTodo = {}\n    },\n    removeTodo (todo) {\n      const vm = this\n      // findIndex 是個比較簡單找到 index 的方式，會把回傳為 true 的 index 位置，存到前方(newIndex)的變數之中\n      const newIndex = vm.todos.findIndex((item, key) => todo.id === item.id)\n      this.todos.splice(newIndex, 1)\n    },\n    editTodo (item) {\n      console.log(item.title)\n      this.cacheTodo = item\n      this.cacheTodoTitle = item.title\n    },\n    cancelEdit () {\n      this.cacheTodo = {}\n    },\n    doneEdit (item) {\n      item.title = this.cacheTodoTitle\n      this.cacheTodoTitle = ''\n      this.cacheTodo = {}\n    },\n    deleteTodos () {\n      this.todos = []\n    }\n  },\n  computed: {\n    filteredTodos () {\n      if (this.visibility === 'all') {\n        return this.todos\n      } if (this.visibility === 'doing') {\n        var newTodo = []\n        this.todos.forEach((item) => {\n          if (!item.completed) {\n            newTodo.push(item)\n          }\n        })\n        return newTodo\n      } if (this.visibility === 'completed') {\n        newTodo = []\n        this.todos.forEach((item) => {\n          if (item.completed) {\n            newTodo.push(item)\n          }\n        })\n        return newTodo\n      }\n    },\n    remaining () {\n      return this.todos.filter(item => !item.completed)\n    }\n  },\n  mounted () {\n    this.getTodos()\n  },\n  watch: {\n    todos: {\n      handler (updatedList) {\n        localStorage.setItem('todos-vuejs', JSON.stringify(updatedList))\n      },\n      deep: true\n    }\n  },\n  created () {\n    this.timeMessage = moment().format('LTS')\n    setInterval(() => this.updateCurrentTime(), 1 * 1000)\n  }\n}\n</script>\n"]}]}