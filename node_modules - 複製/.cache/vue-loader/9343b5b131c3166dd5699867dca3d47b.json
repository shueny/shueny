{"remainingRequest":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\mdbvue\\src\\components\\Datatable.vue?vue&type=style&index=0&id=603d45b3&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\mdbvue\\src\\components\\Datatable.vue","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Shueny\\OneDrive\\github\\side-projects\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.dataTables-scrollBody {\r\n  display: block;\r\n  overflow-y: auto;\r\n  -ms-overflow-style: -ms-autohiding-scrollbar;\r\n}\r\n\r\n.dataTables-scrollBody td,\r\n.dataTables-scrollBody th {\r\n  white-space: nowrap;\r\n}\r\n",{"version":3,"sources":["Datatable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkcA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Datatable.vue","sourceRoot":"node_modules/mdbvue/src/components","sourcesContent":["<template>\r\n  <div class=\"dataTables_wrapper\" :style=\"wrapperStyle\">\r\n    <!-- Entries input and search -->\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-12 col-md-6\">\r\n        <div v-if=\"pagination\">\r\n          <datatable-select @getValue=\"updateEntries\" :options=\"options\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"searching\" class=\"col-sm-12 col-md-6\">\r\n        <datatable-search @getValue=\"updateSearch\" />\r\n      </div>\r\n    </div>\r\n    <!-- Entries input and search -->\r\n\r\n    <!-- Main table -->\r\n    <tbl v-if=\"!scrollY\" v-bind=\"tableProps\" sm datatable>\r\n      <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\r\n        <tr>\r\n          <th\r\n            v-for=\"column in columns\"\r\n            :key=\"column.field\"\r\n            class=\"th-sm sorting\"\r\n            v-on:click=\"sort(column.field, column.sort)\"\r\n          >\r\n            {{column.label}} <i class=\"fas fa-sort float-right\"></i>\r\n          </th>\r\n        </tr>\r\n      </tbl-head>\r\n      <tbl-body>\r\n        <tr v-for=\"row in pages[activePage]\" :key=\"row.id\">\r\n          <td v-for=\"(value, key) in row\" :key=\"key\">\r\n            {{value}}\r\n          </td>\r\n        </tr>\r\n        <tr v-if=\"!pages.length\">\r\n          <td :colspan=\"columns.length\">No matching records found</td>\r\n        </tr>\r\n      </tbl-body>\r\n      <tbl-head tag=\"tfoot\">\r\n        <tr>\r\n          <th\r\n            v-for=\"column in columns\"\r\n            :key=\"column.field+'_foot'\"\r\n            class=\"th-sm sorting\"\r\n          >\r\n            {{column.label}}\r\n          </th>\r\n        </tr>\r\n      </tbl-head>\r\n    </tbl>\r\n    <!-- Main table -->\r\n\r\n    <!-- ScrollY table -->\r\n    <div v-if=\"scrollY\" class=\"dataTables_scroll\">\r\n      <div v-if=\"scrollY\" class=\"dataTables_scrollHead\" style=\"padding-right: 15px\">\r\n        <div class=\"dataTables_scrollHeadInner\">\r\n          <tbl v-bind=\"tableProps\" sm datatable>\r\n            <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\r\n              <tr>\r\n                <th\r\n                  v-for=\"column in columns\"\r\n                  :key=\"column.field\"\r\n                  class=\"th-sm sorting\"\r\n                  v-on:click=\"sort(column.field, column.sort)\"\r\n                >\r\n                  {{column.label}} <i class=\"fas fa-sort float-right\"></i>\r\n                </th>\r\n              </tr>\r\n            </tbl-head>\r\n          </tbl>\r\n        </div>\r\n      </div>\r\n      <tbl v-bind=\"tableProps\" sm datatable>\r\n        <tbl-body>\r\n          <tr v-for=\"row in pages[activePage]\" :key=\"row.id\">\r\n            <td v-for=\"(value, key) in row\" :key=\"key\">\r\n              {{value}}\r\n            </td>\r\n          </tr>\r\n          <tr v-if=\"!pages.length\">\r\n            <td :colspan=\"columns.length\">No matching records found</td>\r\n          </tr>\r\n        </tbl-body>\r\n      </tbl>\r\n      <div class=\"dataTables_scrollFoot\" style=\"padding-right: 15px\">\r\n        <div class=\"dataTables_scrollFootInner\">\r\n          <tbl v-bind=\"tableProps\" sm datatable>\r\n            <tbl-head tag=\"tfoot\">\r\n              <tr>\r\n                <th\r\n                  v-for=\"column in columns\"\r\n                  :key=\"column.field+'_foot'\"\r\n                  class=\"th-sm sorting\"\r\n                >\r\n                  {{column.label}}\r\n                </th>\r\n              </tr>\r\n            </tbl-head>\r\n          </tbl>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- ScrollY table -->\r\n\r\n    <!-- Labels and pagination -->\r\n    <div v-if=\"pagination\" class=\"row\">\r\n      <div class=\"col-sm-12 col-md-5\">\r\n        <div class=\"dataTables_info\" role=\"status\" aria-live=\"polite\">\r\n          Showing {{activePage > 0 ? activePage*entries : activePage+1}} to {{pages.length-1 > activePage ? pages[activePage].length*(activePage+1) : filteredRows.length}} of {{filteredRows.length}} entries\r\n        </div>\r\n      </div>\r\n      <div class=\"col-sm-12 col-md-7\">\r\n        <div class=\"dataTables_paginate float-right\">\r\n          <pagination id=\"pagination\">\r\n            <page-item\r\n              v-if=\"pages.length > display\"\r\n              v-on:click.native=\"changePage(0)\"\r\n              :disabled=\"activePage === 0 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-left\" />\r\n              <p v-else class=\"pagination\">{{start}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-on:click.native=\"changePage(activePage-1)\"\r\n              :disabled=\"activePage === 0 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-left\" />\r\n              <p v-else class=\"pagination\">{{previous}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-for=\"(page, index) in visiblePages\"\r\n              :key=\"index\"\r\n              v-on:click.native=\"changePage(pages.indexOf(visiblePages[index]))\"\r\n              :active=\"activePage === pages.indexOf(visiblePages[index]) ? true : false\"\r\n            >\r\n              {{pages.indexOf(visiblePages[index])+1}}\r\n            </page-item>\r\n            <page-item\r\n              v-on:click.native=\"changePage(activePage+1)\"\r\n              :disabled=\"activePage === pages.length-1 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-right\" />\r\n              <p v-else class=\"pagination\">{{next}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-if=\"pages.length > display\"\r\n              v-on:click.native=\"changePage(pages.length-1)\"\r\n              :disabled=\"activePage === pages.length-1 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-right\" />\r\n              <p v-else class=\"pagination\">{{end}}</p>\r\n            </page-item>\r\n          </pagination>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Labels and pagination -->\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tbl from './Table';\r\nimport TblHead from './TableHead';\r\nimport TblBody from './TableBody';\r\nimport Pagination from './Pagination';\r\nimport PageItem from './PageItem';\r\nimport mdbInput from './Input';\r\nimport DatatableSelect from './DatatableSelect';\r\nimport DatatableSearch from './DatatableSearch';\r\nimport mdbIcon from './Fa';\r\n\r\nconst Datatable = {\r\n  name: 'Datatable',\r\n  props: {\r\n    data: {\r\n      type: [Object, String],\r\n      default: () => ({\r\n        columns: [],\r\n        rows: []\r\n      })\r\n    },\r\n    autoWidth: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    borderless: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    headerColor: {\r\n      type: String\r\n    },\r\n    headerWhite: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    hover: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    materialInputs: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    maxWidth: {\r\n      type: String\r\n    },\r\n    maxHeight: {\r\n      type: String\r\n    },\r\n    order: {\r\n      type: Array\r\n    },\r\n    pagination: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveSm: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveMd: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveLg: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveXl: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    scrollY: {\r\n      type: Boolean,\r\n      defautl: false\r\n    },\r\n    searching: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    sorting: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    striped: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    start: {\r\n      type: String,\r\n      default: 'Start'\r\n    },\r\n    end: {\r\n      type: String,\r\n      default: 'End'\r\n    },\r\n    next: {\r\n      type: String,\r\n      default: 'Next'\r\n    },\r\n    previous: {\r\n      type: String,\r\n      default: 'Previos'\r\n    },\r\n    arrows: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    display: {\r\n      type: Number,\r\n      default: 5\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      rows: this.data.rows || [],\r\n      columns: this.data.columns || [],\r\n      options: [10, 25, 50, 100],\r\n      entries: 10,\r\n      pages: [],\r\n      activePage: 0,\r\n      search: '',\r\n      tableProps: {\r\n        autoWidth: this.autoWidth,\r\n        bordered: this.bordered,\r\n        borderless: this.borderless,\r\n        dark: this.dark,\r\n        fixed: this.fixed,\r\n        hover: this.hover,\r\n        responsive: this.responsive,\r\n        responsiveSm: this.repsonsiveSm,\r\n        responsiveMd: this.repsonsiveMd,\r\n        responsiveLg: this.responsiveLg,\r\n        responsiveXl: this.responsiveXl,\r\n        striped: this.striped,\r\n        dtScrollY: this.scrollY,\r\n        maxHeight: this.maxHeight\r\n      },\r\n      wrapperStyle: {\r\n        maxWidth: this.maxWidth ? this.maxWidth : '100%',\r\n        margin: '0 auto'\r\n      }\r\n    };\r\n  },\r\n  components: {\r\n    DatatableSearch,\r\n    DatatableSelect,\r\n    Tbl,\r\n    TblHead,\r\n    TblBody,\r\n    Pagination,\r\n    PageItem,\r\n    mdbInput,\r\n    mdbIcon\r\n  },\r\n  computed: {\r\n    // filter objects by parameters match\r\n    filteredRows() {\r\n      return this.rows.filter(row => {\r\n        for (let key in row) {\r\n          if (Object.prototype.hasOwnProperty.call(row, key)) {\r\n            const stringValue = row[key].toString();\r\n            if (stringValue.toLowerCase().match(this.search.toLowerCase())) return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n    },\r\n    visiblePages() {\r\n      let start = this.activePage - Math.floor(this.display/2) > 0 ? this.activePage - Math.floor(this.display/2) : 0;\r\n      let end = start + this.display;\r\n      if (end > this.pages.length) {\r\n        start -= (end - this.pages.length);\r\n        end = this.pages.length;\r\n      }\r\n      return this.pages.slice(start, end);\r\n    }\r\n  },\r\n  methods: {\r\n    changePage(index) {\r\n      this.activePage = index;\r\n    },\r\n    sort(field, sort) {\r\n      if (this.sorting) {\r\n        sort === 'asc' ?\r\n          this.rows.sort((a, b) => (a[field] > b[field] ? 1 : -1)) :\r\n          this.rows.sort((a, b) => (a[field] > b[field] ? -1 : 1));\r\n        this.columns[this.columns.findIndex(column => column.field === field)].sort = sort === 'asc' ? 'desc' : 'asc';\r\n      }\r\n    },\r\n    updateEntries(value) {\r\n      this.entries = value;\r\n    },\r\n    updateSearch(value) {\r\n      this.search = value;\r\n    }\r\n  },\r\n  mounted() {\r\n    // bind data or download form API\r\n    if (typeof this.data === 'string') {\r\n      fetch(this.data)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          this.columns = json.columns;\r\n          this.rows = json.rows;\r\n          this.$emit('fields', this.columns);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    // findout rows amount, and slice it into array (split into pages)\r\n    const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n    this.pages = [];\r\n    if (this.pagination) {\r\n      for (let i=1; i<=pagesAmount; i++) {\r\n        const pageEndIndex = i*this.entries;\r\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n      }\r\n    }\r\n    else {\r\n      this.pages.push(this.filteredRows);\r\n    }\r\n    this.activePage = 0;\r\n\r\n    // initial sorting\r\n    if (this.order) {\r\n      this.sort(this.columns[this.order[0]].field, this.order[1]);\r\n    }\r\n\r\n    this.$emit('pages', this.pages);\r\n    this.$emit('fields', this.columns);\r\n  },\r\n  watch: {\r\n    entries() {\r\n      // do the split every entry change (changing entries amount)\r\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n      this.pages = [];\r\n      for (let i=1; i<=pagesAmount; i++) {\r\n        const pageEndIndex = i*this.entries;\r\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n      }\r\n      this.activePage = this.activePage < this.pages.length ? this.activePage : this.pages.length-1;\r\n\r\n      this.$emit('pages', this.pages);\r\n    },\r\n    filteredRows() {\r\n      // do the split on every change in rows (searching)\r\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n      this.pages = [];\r\n      if (this.pagination) {\r\n        for (let i=1; i<=pagesAmount; i++) {\r\n          const pageEndIndex = i*this.entries;\r\n          this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n        }\r\n      }\r\n      else {\r\n        this.pages.push(this.filteredRows);\r\n      }\r\n      this.activePage = 0;\r\n\r\n      this.$emit('pages', this.pages);\r\n    }\r\n  }\r\n};\r\n\r\nexport default Datatable;\r\nexport { Datatable as mdbDatatable };\r\n</script>\r\n\r\n<style scoped>\r\n.dataTables-scrollBody {\r\n  display: block;\r\n  overflow-y: auto;\r\n  -ms-overflow-style: -ms-autohiding-scrollbar;\r\n}\r\n\r\n.dataTables-scrollBody td,\r\n.dataTables-scrollBody th {\r\n  white-space: nowrap;\r\n}\r\n</style>\r\n\r\n<style>\r\n.dataTables_wrapper select {\r\n  display: inline-flex !important;\r\n  width: auto;\r\n}\r\n.dataTables_wrapper input {\r\n  display: inline-flex !important;\r\n  width: auto;\r\n}\r\n.pagination {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"]}]}